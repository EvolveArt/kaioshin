name: Check Set-Up & Build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  check:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Setup rust toolchain
      run: rustup show
    - name: Set-Up
      run: >
        sudo apt-get update && sudo apt-get install -y clang llvm libudev-dev protobuf-compiler
    - uses: Swatinem/rust-cache@v2
    - name: Check Build and run tests
      run: |
        cargo fmt --all -- --check
        cargo clippy -- -D warnings

  typescript-tests:
    runs-on: ubuntu-latest
    needs: ["check"]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Use Node.js 16.x
        uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - name: Typescript integration tests (against dev service)
        run: |
          ####  Preparing the typescript api
          cd typescript-api
          npm ci

          cd ../tests
          npm ci
          #### Prepares and copies the typescript generated API to include in the tests
          #### TODO: add back later
          #### npm run setup-local-typescript-api

          #### Compile typescript tests into javascript (more stable for Mocha)
          #### This also better display typescript issues
          npm run build

          ### TODO: use docker image
          node node_modules/.bin/mocha \
                --parallel -j $((CPUS / 2)) \
                --exit \
                'build/tests/**/test-*.js'

      # We determine whether there are unmodified package-lock.json files by:
      # 1. Asking git for a list of all modified files
      # 2. Using grep to reduce the list to only package-lock.json files
      # 3. Counting the number of lines of output
      - name: Check package-lock.json
        run: |
          # Log npm version to make sure it maches with local version
          npm -v
          # Make sure git is working, and if not abort early. When git is not working it looks like:
          # $ git diff-index --name-only HEAD
          # fatal: not a git repository (or any of the parent directories): .git
          DIFF_INDEX=$(git diff-index --name-only HEAD)
          if [[ ${DIFF_INDEX:0:5} == "fatal" ]]; then
            echo "There was an error with the git checkout. Can't check package-lock.json file."
            false
          fi
          FILECOUNT=$(echo $DIFF_INDEX | grep package-lock.json | wc -l)
          if [[ $FILECOUNT -eq 0 ]]; then
            echo "All package-lock.json files are valid"
          else
            git diff --cached
            echo "The following package-lock.json files have uncommitted changes"
            echo $DIFF_INDEX | grep package-lock.json
            false
          fi

  coverage:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2

    - name: Setup rust toolchain
      run: rustup show
    - name: Set-Up
      run: >
        sudo apt-get update && sudo apt-get install -y clang llvm libudev-dev protobuf-compiler && cargo install cargo-tarpaulin
    - uses: Swatinem/rust-cache@v2
    - name: Coverage
      run: cargo tarpaulin --workspace --skip-clean
    - name: Upload coverage to codecov.io
      uses: codecov/codecov-action@v3
      with:
        fail_ci_if_error: true

  bench:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Setup rust toolchain
      run: rustup show
    - name: Set-Up
      run: >
        sudo apt-get update && sudo apt-get install -y clang llvm libudev-dev protobuf-compiler
    - uses: Swatinem/rust-cache@v2
    - name: Check Build for Benchmarking
      run: >
        pushd crates/node && cargo check --features=runtime-benchmarks --release
